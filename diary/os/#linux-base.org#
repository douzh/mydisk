* shell

SSH Secure Shell


* cmd

** tar

主选项：
-c ：创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。相当于打包
-x ：从档案文件中释放文件。相当于拆包。
-t ：列出档案文件的内容，查看已经备份了哪些文件。
特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！因为不可能同时压缩与解压缩。

辅助选项：
-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩或解压？ 一般格式为xx.tar.gz或xx. tgz
-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩或解压？一般格式为xx.tar.bz2
-v ：压缩的过程中显示文件！这个常用
-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加其他参数！
-p ：使用原文件的原来属性（属性不会依据使用者而变）
--exclude FILE：在压缩的过程中，不要将 FILE 打包！

范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar
[root@linux ~]# tar -cvf /tmp/etc.tar /etc　　　　<==仅打包，不压缩！

[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc　　<==打包后，以 gzip 压缩

[root@linux ~]# tar -jcvf /tmp/etc.tar.bz2 /etc　　<==打包后，以 bzip2 压缩

# 特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。

# 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～

# 如果加 j 参数，则以 .tar.bz2 来作为附档名啊～

# 上述指令在执行的时候，会显示一个警告讯息：

# 『tar: Removing leading `/" from member names』那是关於绝对路径的特殊设定。

范例二：查阅上述 /tmp/etc.tar.gz 文件内有哪些文件？
[root@linux ~]# tar -ztvf /tmp/etc.tar.gz

# 由於我们使用 gzip 压缩，所以要查阅该 tar file 内的文件时，

# 就得要加上 z 这个参数了！这很重要的！

范例四：在 /tmp 底下，我只想要将 /tmp/etc.tar.gz 内的 etc/passwd 解开而已

[root@linux ~]# cd /tmp

[root@linux tmp]# tar -zxvf /tmp/etc.tar.gz etc/passwd

# 我可以透过 tar -ztvf 来查阅 tarfile 内的文件名称，如果单只要一个文件，

# 就可以透过这个方式来下达！注意到！ etc.tar.gz 内的根目录 / 是被拿掉了！

范例五：我要备份 /home, /etc ，但不要 /home/dmtsai

[root@linux ~]# tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc

*** -C参数

$ tar -cvf file2.tar /home/usr2/file2

该命令可以将/home/usr2/file2文件打包到当前目录下的file2.tar中，需要注意的是：使用绝对路径标识的源文件，在用tar命令压缩后，文件名连同绝对路径（这里是home/usr2/，根目录'/'被自动去掉了）一并被压缩进来。

$ tar -cvf file2.tar -C /home/usr2 file2

该命令中的-C dir参数，将tar的工作目录从当前目录改为/home/usr2，将file2文件（不带绝对路径）压缩到file2.tar中。

使用tar的-C dir参数，同样可以做到在当前目录/home/usr1下将文件解压缩到其他目录，例如：

$ tar -xvf file2.tar -C /home/usr2

* 导航

** pwd
当前工作目录

** ls 

权限|硬链接数|所有者|用户组|文件大小|修改日期|文件名

ls dir...

-a --all 所有文件，包括隐藏文件
-d --directory 和-l同用，列出目录
-F --classify 标注文件类型
-h --human-readable 文件大小以K或M标注
-l 长格式显示
-r --reverse 反序显示，正常按字母升序
-S 按文件大小排序
-t 按修改时间排序

列出文件

** cd

更改工作目录



* 文件目录

** 常用参数

-i --interactive 提示用户确认

-r --recursive 递归

-f --force 强制执行

-v --verbose 信息性消息

** mkdir

mkdir dir1 dir2 dir3

** cp

cp src dest
cp src... dest
cp -r dir1 dir2

** mv

mv src dest
mv src... dest
mv dir1 dir2

** rm

rm item...

rm -rf dir

** ln

硬链接
ln file link

符号链接
ln -s file/dir link

** file

file filename
确定文件类型

** less

less filename
列出文件内容

* 权限

-rw-rw-r--
文件类型|所有者权限|组权限|其它用户权限

文件类型：
- 普通文件
d 目录文件
l 符号链接
c 字符设备文件
b 块设备文件

** chmod

chmod [options] mode files

只能文件属主或特权用户才能使用该功能来改变文件存取模式。

mode可以是数字形式或以who opcode permission形式表示。

who是可选的，默认是a(所有用户)。

只能选择一个opcode(操作码)。

可指定多个mode，以逗号分开。

*** options

-c，--changes 只输出被改变文件的信息
-f，--silent，--quiet 当chmod不能改变文件模式时，不通知文件的用户
--help 输出帮助信息。
-R，--recursive 可递归遍历子目录，把修改应到目录下所有文件和子目录
--reference=filename 参照filename的权限来设置权限
-v，--verbose 无论修改是否成功，输出每个文件的信息
--version 输出版本信息。

*** who

u 用户
g 组
o 其它
a 所有用户(默认)

*** opcode

+ 增加权限
- 删除权限
= 重新分配权限

*** permission

r 读
w 写
x 执行
s 设置用户(或组)的ID号
t 设置粘着位(sticky bit)，防止文件或目录被非属主删除
u 用户的当前权限
g 组的当前权限
o 其他用户的当前权限

*** 示例

$ chmod u+x file  给file的属主增加执行权限
$ chmod 751 file  给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限
$ chmod u=rwx,g=rx,o=x file      上例的另一种形式
$ chmod =r file   为所有用户分配读权限
$ chmod 444 file  同上例
$ chmod a-wx,a+r file 同上例
$ chmod -R u+r directory  递归地给directory目录下所有文件和子目录的属主分配读的权限
$ chmod 4755      设置用ID，给属主分配读、写和执行权限，给组和其他用户分配读、执行的权限。

** su

su 